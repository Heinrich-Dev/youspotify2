# This file handles everything related to running the flask server and dealing with Spotify's authentication
import spotipy
import os
import time
from spotipy.oauth2 import SpotifyOAuth
from flask import Flask, session, url_for, redirect, request

app = Flask(__name__)

@app.route("/")
def authenticate():
    url = create_authenticator().get_authorize_url()
    return redirect(url)

@app.route("/redirect")
def redirect_page():
    session.clear()
    code = request.args.get('code')
    token = create_authenticator().get_access_token(code)
    session[TOKEN] = token
    return redirect(url_for('saveTinyDesk', external = True))

@app.route("/youtubeget", methods=["POST"], strict_slashes=False)
def youtubeget():
    return {"Status": "Success"}

@app.route("/tinydesk")
def saveTinyDesk():
    try:
        token = get_new_token()
    except:
        return redirect('/')
    
    sp = spotipy.Spotify(auth=token['access_token'])
    user_playlists = sp.current_user_playlists()['items']
    playlist_exists = False
    for playlist in user_playlists:
        if(playlist['name'] == new_playlist_name):
            playlist_exists = True
            break
    if(playlist_exists):
        update_playlist(sp)
    #TODO: update playlists
    else:
        create_playlist(sp)
       #update_playlist(sp)
        
def create_playlist(sp):
    id = sp.current_user()['id']
    sp.user_playlist_create(id, 'Tiny Desk Concerts', public=False, collaborative=False, description="Auto-Generated by Heinrich-Dev's YouSpotify application")

def update_playlist(sp):
    return

def create_authenticator():
    #requires the environment variables to be set: SPOTIPY_CLIENT_ID, SPOTIPY_CLIENT_SECRET
    scope = 'user-library-read playlist-modify-public playlist-modify-private'
    return SpotifyOAuth(redirect_uri=url_for('redirect_page', _external = True), scope=scope)

def get_new_token():
    token = session.get(TOKEN, None)
    if not token:
        redirect(url_for('authenticate', external=False))
    
    now = int(time.time())
    if(token['expires_at'] - now < 60):
        auth = create_authenticator()
        token = auth.refresh_access_token(token['refresh-token'])
        
    return token

if __name__ == "__main__":
    app.run(debug=True)